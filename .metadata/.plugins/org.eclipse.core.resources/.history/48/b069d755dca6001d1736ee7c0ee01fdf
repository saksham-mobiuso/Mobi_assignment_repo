package com.mo.exercise.graph;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class List_relationships {
	
	List relatives_of_persticular_person = new ArrayList();
	
	ArrayList<Relationship> relation = new ArrayList<>();
	

	
public void allRelations() throws FileNotFoundException {
	List_relationships list_of_relation= new List_relationships();
	int no_of_relations=list_of_relation.addToListOfRelationships().size();
	for(int i=0;i<no_of_relations;i++) {
		System.out.println(
				list_of_relation.addToListOfRelationships().get(i).getRelated_person() + " and " +
						list_of_relation.addToListOfRelationships().get(i).getRelative()
							+ " are "+ list_of_relation.addToListOfRelationships().get(i).getRelation()
				);
	}
	
	
}
	
public ArrayList<Relationship> addToListOfRelationships() throws FileNotFoundException{
		
		Scanner scan = new Scanner(new File("/Users/sakshamsharma/Downloads/familygraph_exercise/src/test/resources/relationships.csv"));
		

		while(scan.hasNext()) {
			String[] s = scan.nextLine().split(",");
			//System.out.println(s[0]);
			//System.out.println(s[1]);
			//System.out.println(s[2]);
			
			 Relationship r =new Relationship();
			 r.setRelated_person(s[0]);
			 r.setRelation(s[1]);
			 r.setRelative(s[2]);
			 relation.add(r);
			}
		scan.close();
				
		
		return relation;
	}

public int find_total_relations(String id) throws FileNotFoundException {
	
	int count=0;
	List_relationships list_of_relation=new List_relationships();
	

	int size_of_relation_array=list_of_relation.addToListOfRelationships().size();
	
	
	for(int rp=0; rp<size_of_relation_array ;rp++) {
		
		if(id.equals(list_of_relation.addToListOfRelationships().get(rp).getRelated_person()) || id.equals(list_of_relation.addToListOfRelationships().get(rp).getRelative())){
			count++;
		}
	}
	return count;	
	
	}


public List extended_family_REcursive_function(Object object, List relatives_of_perticular_person) throws FileNotFoundException {
	
	List_relationships list_of_relation=new List_relationships();
	
	int size_of_relation_array=list_of_relation.addToListOfRelationships().size();
	
	
	for(int rp=0; rp<size_of_relation_array ;rp++) {
		
		if(object.equals(list_of_relation.addToListOfRelationships().get(rp).getRelated_person())
				&& list_of_relation.addToListOfRelationships().get(rp).getRelation().equals("FAMILY") && !relatives_of_perticular_person.contains(list_of_relation.addToListOfRelationships().get(rp).getRelative())){
			relatives_of_perticular_person.add(list_of_relation.addToListOfRelationships().get(rp).getRelative());
		}
		if(object.equals(list_of_relation.addToListOfRelationships().get(rp).getRelative())
				&& list_of_relation.addToListOfRelationships().get(rp).getRelation().equals("FAMILY") && !relatives_of_perticular_person.contains(list_of_relation.addToListOfRelationships().get(rp).getRelated_person())) {
			relatives_of_perticular_person.add(list_of_relation.addToListOfRelationships().get(rp).getRelated_person());
		}
		
	}

	return relatives_of_perticular_person;	
}

public int calculateExtendedFamily(String id) throws FileNotFoundException {
	List_relationships lr = new List_relationships();
	int count=0;
	if(relatives_of_persticular_person.isEmpty()) {
		count=extended_family_REcursive_function(id, relatives_of_persticular_person).size();
	}
	for(int i=0;i<relatives_of_persticular_person.size();i++) {
		count=extended_family_REcursive_function(relatives_of_persticular_person.toArray()[i], relatives_of_persticular_person).size();
	}
	
	//System.out.println(relatives_of_persticular_person);
	return count;
	
}


}
